
opcode:
  # RV32/64G listings:
  # Quadrant 0
  - OpcodeLoad      : 7'b00_000_11
  - OpcodeLoadFp    : 7'b00_001_11
  - OpcodeCustom0   : 7'b00_010_11
  - OpcodeMiscMem   : 7'b00_011_11
  - OpcodeOpImm     : 7'b00_100_11
  - OpcodeAuipc     : 7'b00_101_11
  - OpcodeOpImm32   : 7'b00_110_11
  # Quadrant 1
  - OpcodeStore     : 7'b01_000_11
  - OpcodeStoreFp   : 7'b01_001_11
  - OpcodeCustom1   : 7'b01_010_11
  - OpcodeAmo       : 7'b01_011_11
  - OpcodeOp        : 7'b01_100_11
  - OpcodeLui       : 7'b01_101_11
  - OpcodeOp32      : 7'b01_110_11
  # Quadrant 2
  - OpcodeMadd      : 7'b10_000_11
  - OpcodeMsub      : 7'b10_001_11
  - OpcodeNmsub     : 7'b10_010_11
  - OpcodeNmadd     : 7'b10_011_11
  - OpcodeOpFp      : 7'b10_100_11
  - OpcodeRsrvd1    : 7'b10_101_11
  - OpcodeCustom2   : 7'b10_110_11
  # Quadrant 3
  - OpcodeBranch    : 7'b11_000_11
  - OpcodeJalr      : 7'b11_001_11
  - OpcodeRsrvd2    : 7'b11_010_11
  - OpcodeJal       : 7'b11_011_11
  - OpcodeSystem    : 7'b11_100_11
  - OpcodeRsrvd3    : 7'b11_101_11
  - OpcodeCustom3   : 7'b11_110_11


opcodes:
  - opcode: 6..0
  - func3: 14..12
  - func7: 31..25
  - FENCE2: 19..7
  - FENCE3: 31..27
  - FENCEI: 31..20

instructions:
  # RV32I
  - LUI:    {format: U,  ext: RV32I, opcodes: {opcode: OpcodeLui}}
  - AUIPC:  {format: U,  ext: RV32I, opcodes: {opcode: OpcodeAuipc}, func: {use_pc : 1'b1}}
  - JAL:    {format: UJ, ext: RV32I, opcodes: {opcode: OpcodeJal}}
  - JALR:   {format: I,  ext: RV32I, opcodes: {opcode: OpcodeJalr, func3: 3'b000}}
  - BEQ:    {format: SB, ext: RV32I, opcodes: {opcode: OpcodeBranch, func3: 3'b000}}
  - BNE:    {format: SB, ext: RV32I, opcodes: {opcode: OpcodeBranch,func3: 3'b001}}
  - BLT:    {format: SB, ext: RV32I, opcodes: {opcode: OpcodeBranch,func3: 3'b100}}
  - BGE:    {format: SB, ext: RV32I, opcodes: {opcode: OpcodeBranch,func3: 3'b101}}
  - BLTU:   {format: SB, ext: RV32I, opcodes: {opcode: OpcodeBranch,func3: 3'b110}}
  - BGEU:   {format: SB, ext: RV32I, opcodes: {opcode: OpcodeBranch,func3: 3'b111}}
  - LB:     {format: I,  ext: RV32I, opcodes: {opcode: OpcodeLoad ,func3: 3'b000}}
  - LH:     {format: I,  ext: RV32I, opcodes: {opcode: OpcodeLoad ,func3: 3'b001}}
  - LW:     {format: I,  ext: RV32I, opcodes: {opcode: OpcodeLoad ,func3: 3'b010}}
  - LBU:    {format: I,  ext: RV32I, opcodes: {opcode: OpcodeLoad ,func3: 3'b100}}
  - LHU:    {format: I,  ext: RV32I, opcodes: {opcode: OpcodeLoad ,func3: 3'b101}}
  - SB:     {format: S,  ext: RV32I, opcodes: {opcode: OpcodeLoad,func3: 3'b000}}
  - SH:     {format: S,  ext: RV32I, opcodes: {opcode: OpcodeLoad,func3: 3'b001}}
  - SW:     {format: S,  ext: RV32I, opcodes: {opcode: OpcodeLoad,func3: 3'b010}}
  - ADDI:   {format: I,  ext: RV32I, opcodes: {opcode: OpcodeOpImm,func3: 3'b000}}
  - SLTI:   {format: I,  ext: RV32I, opcodes: {opcode: OpcodeOpImm,func3: 3'b010}}
  - SLTIU:  {format: I,  ext: RV32I, opcodes: {opcode: OpcodeOpImm,func3: 3'b011}}
  - XORI:   {format: I,  ext: RV32I, opcodes: {opcode: OpcodeOpImm,func3: 3'b100}}
  - ORI:    {format: I,  ext: RV32I, opcodes: {opcode: OpcodeOpImm,func3: 3'b110}}
  - ANDI:   {format: I,  ext: RV32I, opcodes: {opcode: OpcodeOpImm,func3: 3'b111}}
  - SLLI:   {format: R,  ext: RV32I, opcodes: {opcode: OpcodeOpImm,func3: 3'b001,func7: 7'd0}}
  - SRLI:   {format: R,  ext: RV32I, opcodes: {opcode: OpcodeOpImm,func3: 3'b101,func7: 7'd0}}
  - SRAI:   {format: R,  ext: RV32I, opcodes: {opcode: OpcodeOpImm,func3: 3'b101,func7: 7'd32}}
  - ADD:    {format: R,  ext: RV32I, opcodes: {opcode: OpcodeOp,func3: 3'b000,func7: 7'd0}}
  - SUB:    {format: R,  ext: RV32I, opcodes: {opcode: OpcodeOp,func3: 3'b000,func7: 7'd32}}
  - SLL:    {format: R,  ext: RV32I, opcodes: {opcode: OpcodeOp,func3: 3'b001,func7: 7'd0}}
  - SLT:    {format: R,  ext: RV32I, opcodes: {opcode: OpcodeOp,func3: 3'b010,func7: 7'd0}}
  - SLTU:   {format: R,  ext: RV32I, opcodes: {opcode: OpcodeOp,func3: 3'b011,func7: 7'd0}}
  - XOR:    {format: R,  ext: RV32I, opcodes: {opcode: OpcodeOp,func3: 3'b100,func7: 7'd0}}
  - SRL:    {format: R,  ext: RV32I, opcodes: {opcode: OpcodeOp,func3: 3'b101,func7: 7'd0}}
  - SRA:    {format: R,  ext: RV32I, opcodes: {opcode: OpcodeOp,func3: 3'b101,func7: 7'd32}}
  - OR:     {format: R,  ext: RV32I, opcodes: {opcode: OpcodeOp,func3: 3'b110,func7: 7'd0}}
  - AND:    {format: R,  ext: RV32I, opcodes: {opcode: OpcodeOp,func3: 3'b111,func7: 7'd0}}
  - FENCE:  {format: R,  ext: RV32I, opcodes: {opcode: OpcodeMiscMem,FENCE2: "'d0",FENCE3: "'d0"}}
  - FENCEI: {format: R,  ext: RV32I, opcodes: {opcode: OpcodeMiscMem,FENCE2: "'d32",FENCEI: "'d0"}}
  - ECALL:  {format: I,  ext: RV32I, opcodes: {opcode: OpcodeSystem, func3: 3'b000, FENCEI: "'d0"}, func: {ecall : 1'b1}}
  - EBREAK: {format: I,  ext: RV32I, opcodes: {opcode: OpcodeSystem, func3: 3'b000, FENCEI: "'d1"}, func: {ebreak: 1'b1}}
  - CSRRW:  {format: I,  ext: RV32I, opcodes: {opcode: OpcodeSystem,func3: 3'b001}}
  - CSRRS:  {format: I,  ext: RV32I, opcodes: {opcode: OpcodeSystem,func3: 3'b010}}
  - CSRRC:  {format: I,  ext: RV32I, opcodes: {opcode: OpcodeSystem,func3: 3'b011}}
  - CSRRWI: {format: I,  ext: RV32I, opcodes: {opcode: OpcodeSystem,func3: 3'b101}, func: {use_zimm : 1'b1}}
  - CSRRSI: {format: I,  ext: RV32I, opcodes: {opcode: OpcodeSystem,func3: 3'b110}, func: {use_zimm : 1'b1}}
  - CSRRCI: {format: I,  ext: RV32I, opcodes: {opcode: OpcodeSystem,func3: 3'b111}, func: {use_zimm : 1'b1}}